{"version":3,"file":"index.mjs","sources":["../lib/weights.js","../lib/cdf.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar memoize = require( '@stdlib/utils-memoize' );\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nmodule.exports = memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/math-base-assert-is-positive-integer' );\nvar isfinite = require( '@stdlib/math-base-assert-is-finite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar LN2 = require( '@stdlib/constants-float64-ln-two' );\nvar weights = require( './weights.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* @example\n* var y = cdf( 7.0, 6 );\n* // returns ~0.281\n*\n* @example\n* var y = cdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction cdf( x, n ) {\n\tvar mlim;\n\tvar pui;\n\tvar i;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tx = round( x );\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x >= mlim ) {\n\t\treturn 1.0;\n\t}\n\tpui = exp( -n * LN2 );\n\tp = 0;\n\tfor ( i = 0; i <= x; i++ ) {\n\t\tp += weights( i, n ) * pui;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/math-base-assert-is-positive-integer' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isfinite = require( '@stdlib/math-base-assert-is-finite' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar LN2 = require( '@stdlib/constants-float64-ln-two' );\nvar weights = require( './weights.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 8 );\n* var y = cdf( 3.9 );\n* // returns ~0.027\n*\n* y = cdf( 17.0 );\n* // returns ~0.473\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tvar pui;\n\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tpui = exp( -n * LN2 );\n\tmlim = n * ( n + 1 ) / 2;\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar i;\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tx = round( x );\n\t\tif ( x >= mlim ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tp = 0;\n\t\tfor ( i = 0; i <= x; i++ ) {\n\t\t\tp += weights( i, n ) * pui;\n\t\t}\n\t\treturn p;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-signrank-cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats-base-dists-signrank-cdf' );\n*\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* var myCDF = cdf.factory( 8 );\n* y = myCDF( 3.9 );\n* // returns ~0.027\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n"],"names":["memoized","require$$0","x","n","mlim","isPositiveInteger","isfinite","require$$1","isnan","require$$2","round","require$$3","exp","require$$4","LN2","require$$5","weights","constantFunction","require$$6","cdf","pui","i","p","NaN","factory","lib"],"mappings":";;80BAsBA,IAKIA,EAgCJA,EArCcC,GAkBd,SAAkBC,EAAGC,GACpB,IAAIC,EAEJ,OAAW,IAAND,EACW,IAAND,EAAY,EAAI,GAE1BE,EAAOD,GAAMA,EAAI,GAAM,EAClBD,EAAI,GAAKA,EAAIE,EACV,GAEHF,EAAIE,EAAO,IACfF,EAAIE,EAAOF,GAELF,EAAUE,EAAIC,EAAGA,EAAI,GAAMH,EAAUE,EAAGC,EAAI,QAWpD,IC1CIE,EAAoBJ,EACpBK,EAAWC,EACXC,EAAQC,EACRC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EDoCahB,ECmCjB,IC7EIK,EAAoBJ,EACpBgB,EAAmBV,EACnBD,EAAWG,EACXC,EAAQC,EACRH,EAAQK,EACRD,EAAMG,EACND,EAAMI,EACNF,EFmCahB,EE8BjB,ICvDAmB,EF6BA,SAAcjB,EAAGC,GAChB,IACIiB,EACAC,EACAC,EACJ,GACCd,EAAON,KACNG,EAAmBF,KACnBG,EAAUH,GAEX,OAAOoB,IAER,GAAKrB,EAAI,EACR,OAAO,EAIR,IAFAA,EAAIQ,EAAOR,KACJC,GAAMA,EAAI,GAAM,EAEtB,OAAO,EAIR,IAFAiB,EAAMR,GAAMT,EAAIW,GAChBQ,EAAI,EACED,EAAI,EAAGA,GAAKnB,EAAGmB,IACpBC,GAAKN,EAASK,EAAGlB,GAAMiB,EAExB,OAAOE,GErDRE,EDQA,SAAkBrB,GACjB,IAAIC,EACAgB,EAEJ,OAAMf,EAAmBF,IAAQG,EAAUH,IAG3CiB,EAAMR,GAAMT,EAAIW,GAChBV,EAAOD,GAAMA,EAAI,GAAM,EAcvB,SAAcD,GACb,IAAImB,EACAC,EACJ,GAAKd,EAAON,GACX,OAAOqB,IAER,GAAKrB,EAAI,EACR,OAAO,EAGR,IADAA,EAAIQ,EAAOR,KACDE,EACT,OAAO,EAGR,IADAkB,EAAI,EACED,EAAI,EAAGA,GAAKnB,EAAGmB,IACpBC,GAAKN,EAASK,EAAGlB,GAAMiB,EAExB,OAAOE,IAlCAL,EAAkBM,MCf3BtB,EAOAkB,EAAA,UAAAK,GAKA,IAAAC,EAAAN"}